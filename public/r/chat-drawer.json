{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chat-drawer",
  "type": "registry:component",
  "title": "Chat Drawer",
  "description": "A reusable global drawer chat component with AI integration. Features loading states with animations, close button with smooth transitions, ai chat integration and responsive design.",
  "registryDependencies": [
    "button",
    "drawer",
    "input"
  ],
  "devDependencies": [
    "@ai-sdk/react",
    "ai",
    "lucide-react",
    "react"
  ],
  "files": [
    {
      "path": "registry/new-york/chat-drawer/chat-drawer.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useChat } from \"@ai-sdk/react\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerClose,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageCircle, Send, Loader2, X } from \"lucide-react\";\nimport { DefaultChatTransport } from \"ai\";\n\nexport function ChatDrawer() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const { messages, sendMessage, status } = useChat({\n    transport: new DefaultChatTransport({\n      api: \"http://localhost:3000/api/chat/fanlink-landing-vercel-app--1754330289750\",\n    }),\n  });\n  const bottomRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    bottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n  const isLoading = status === \"streaming\" || status === \"submitted\";\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const renderMessageContent = (message: any) => {\n    if (message.parts) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return message.parts.map((part: any, index: number) => {\n        if (part.type === \"text\") {\n          return <span key={index}>{part.text}</span>;\n        }\n        return null;\n      });\n    }\n    return message.content || \"\";\n  };\n\n  return (\n    <Drawer open={isOpen} onOpenChange={setIsOpen}>\n      <DrawerTrigger asChild>\n        <Button\n          size=\"lg\"\n          className=\"fixed bottom-6 right-6 h-14 w-14 bg-primary text-white rounded-full shadow-lg hover:shadow-xl transition-shadow z-50\"\n          aria-label=\"Open chat\"\n        >\n          <MessageCircle className=\"h-6 w-6\" />\n        </Button>\n      </DrawerTrigger>\n      <DrawerContent\n  className=\"h-[100vh] !w-full !sm:w-96 ml-auto flex flex-col !border-0\"\n\n  data-vaul-drawer-direction=\"right\"\n>\n  <DrawerHeader className=\"flex flex-row items-center justify-between p-4 border-b border-white/10\">\n    <DrawerTitle className=\"text-lg font-semibold\">\n      AI Chat Assistant\n    </DrawerTitle>\n    <DrawerClose className=\"text-primary hover:text-gray-700\">\n      <X className=\"h-5 w-5\" />\n    </DrawerClose>\n  </DrawerHeader>\n\n  {/* Mensajes scrollables */}\n <div className=\"flex-1 overflow-y-auto space-y-4 p-4\">\n  {messages.length === 0 ? (\n    <div className=\"text-center text-muted-foreground py-8\">\n      <MessageCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n      <p>Start a conversation with the AI assistant!</p>\n    </div>\n  ) : (\n    <>\n      {messages.map((message) => (\n        <div\n          key={message.id}\n          className={`flex ${\n            message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n          }`}\n        >\n          <div\n            className={`max-w-[80%] rounded-lg px-4 py-2 ${\n              message.role === \"user\"\n                ? \"bg-primary text-primary-foreground\"\n                : \"bg-muted\"\n            }`}\n          >\n            <p className=\"text-sm\">{renderMessageContent(message)}</p>\n            <p className=\"text-xs opacity-70 mt-1\">\n              {new Date().toLocaleTimeString()}\n            </p>\n          </div>\n        </div>\n      ))}\n\n      {/* ðŸ‘‡ Agrega este bloque */}\n      {isLoading && (\n        <div className=\"flex justify-start\">\n          <div className=\"bg-muted rounded-lg px-4 py-2 flex items-center space-x-2\">\n            <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">AI is typing...</p>\n          </div>\n        </div>\n      )}\n    </>\n  )}\n\n  {/* Scroll anchor */}\n  <div ref={bottomRef} />\n</div>\n\n\n\n  {/* Input */}\n  <form\n    onSubmit={(e) => {\n      e.preventDefault();\n      sendMessage({ text: input });\n      setInput(\"\");\n    }}\n    className=\"flex space-x-2 p-4 border-t border-white/10\"\n  >\n    <Input\n      value={input}\n      onChange={(e) => setInput(e.currentTarget.value)}\n      placeholder=\"Type your message...\"\n      disabled={isLoading}\n      className=\"flex-1\"\n    />\n    <Button\n      type=\"submit\"\n      disabled={!input.trim() || isLoading}\n      size=\"icon\"\n      className=\"bg-primary\"\n    >\n      {isLoading ? (\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n      ) : (\n        <Send className=\"h-4 w-4\" />\n      )}\n    </Button>\n  </form>\n</DrawerContent>\n\n    </Drawer>\n  );\n}\n"
    }
  ],
  "categories": [
    "chat",
    "drawer",
    "ai"
  ],
  "meta": {
    "features": [
      "Loading states with animations",
      "Close button with smooth transitions",
      "AI chat integration",
      "Responsive design",
      "Auto-scrolling messages"
    ],
    "lastUpdated": "2025-08-04T21:49:08.099Z"
  }
}