{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chat-drawer",
  "type": "registry:component",
  "title": "Chat Drawer",
  "description": "A reusable global drawer chat component with AI integration.",
  "devDependencies": [
    "lucide-react",
    "ai",
    "@ai-sdk/react@beta",
    "@ai-sdk/openai"
  ],
  "registryDependencies": [
    "drawer",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "registry/new-york/chat-drawer/chat-drawer.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useChat } from \"@ai-sdk/react\"\nimport { Drawer, DrawerContent, DrawerHeader, DrawerTitle, DrawerTrigger } from \"@/components/ui/drawer\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { MessageCircle, Send, Loader2 } from \"lucide-react\"\n\nexport function ChatDrawer() {\n  const [isOpen, setIsOpen] = useState(false)\n  const [input, setInput] = useState(\"\")\n  const { messages, sendMessage, status } = useChat()\n\n  const isLoading = status === \"streaming\" || status === \"submitted\"\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!input.trim() || isLoading) return\n\n    sendMessage({ role: \"user\", parts: [{ type: \"text\", text: input }] })\n    setInput(\"\")\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault()\n      handleSubmit(e)\n    }\n  }\n\n  const renderMessageContent = (message: any) => {\n    if (message.parts) {\n      return message.parts.map((part: any, index: number) => {\n        if (part.type === 'text') {\n          return <span key={index}>{part.text}</span>\n        }\n        return null\n      })\n    }\n    return message.content || \"\"\n  }\n\n  return (\n    <Drawer open={isOpen} onOpenChange={setIsOpen}>\n      <DrawerTrigger asChild>\n        <Button\n          size=\"lg\"\n          className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-shadow z-50\"\n          aria-label=\"Open chat\"\n        >\n          <MessageCircle className=\"h-6 w-6\" />\n        </Button>\n      </DrawerTrigger>\n      <DrawerContent className=\"h-full w-96 ml-auto\" data-vaul-drawer-direction=\"right\">\n        <DrawerHeader>\n          <DrawerTitle>AI Chat Assistant</DrawerTitle>\n        </DrawerHeader>\n        <div className=\"flex flex-col h-full p-4\">\n          <div className=\"flex-1 overflow-y-auto mb-4 space-y-4\">\n            {messages.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-8\">\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Start a conversation with the AI assistant!</p>\n              </div>\n            ) : (\n              messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  <div\n                    className={`max-w-[80%] rounded-lg px-4 py-2 ${\n                      message.role === \"user\"\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"bg-muted\"\n                    }`}\n                  >\n                    <p className=\"text-sm\">{renderMessageContent(message)}</p>\n                    <p className=\"text-xs opacity-70 mt-1\">\n                      {new Date().toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n            {isLoading && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-muted rounded-lg px-4 py-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <p className=\"text-sm\">AI is typing...</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n            <Input\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              disabled={isLoading}\n              className=\"flex-1\"\n            />\n            <Button\n              type=\"submit\"\n              disabled={!input.trim() || isLoading}\n              size=\"icon\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </form>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}
