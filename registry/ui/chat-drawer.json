{
  "name": "chat-drawer",
  "type": "component",
  "description": "Global chat drawer component with AI integration",
  "registryDependencies": [
    "drawer",
    "button",
    "input"
  ],
  "devDependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "name": "components/ui/chat-drawer.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Drawer, DrawerContent, DrawerHeader, DrawerTitle, DrawerTrigger } from \"@/components/ui/drawer\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { MessageCircle, Send, Loader2 } from \"lucide-react\"\n\ninterface Message {\n  id: string\n  content: string\n  role: \"user\" | \"assistant\"\n  timestamp: Date\n}\n\nexport function ChatDrawer() {\n  const [isOpen, setIsOpen] = useState(false)\n  const [messages, setMessages] = useState<Message[]>([])\n  const [inputValue, setInputValue] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n\n  const sendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputValue.trim(),\n      role: \"user\",\n      timestamp: new Date()\n    }\n\n    setMessages(prev => [...prev, userMessage])\n    setInputValue(\"\")\n    setIsLoading(true)\n\n    try {\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage.content,\n          history: messages\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error(\"Failed to send message\")\n      }\n\n      const data = await response.json()\n      \n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: data.response,\n        role: \"assistant\",\n        timestamp: new Date()\n      }\n\n      setMessages(prev => [...prev, assistantMessage])\n    } catch (error) {\n      console.error(\"Error sending message:\", error)\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: \"Sorry, I encountered an error. Please try again.\",\n        role: \"assistant\",\n        timestamp: new Date()\n      }\n      setMessages(prev => [...prev, errorMessage])\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault()\n      sendMessage()\n    }\n  }\n\n  return (\n    <Drawer open={isOpen} onOpenChange={setIsOpen}>\n      <DrawerTrigger asChild>\n        <Button\n          size=\"lg\"\n          className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-shadow z-50\"\n          aria-label=\"Open chat\"\n        >\n          <MessageCircle className=\"h-6 w-6\" />\n        </Button>\n      </DrawerTrigger>\n      <DrawerContent className=\"h-full w-96 ml-auto\" data-vaul-drawer-direction=\"right\">\n        <DrawerHeader>\n          <DrawerTitle>AI Chat Assistant</DrawerTitle>\n        </DrawerHeader>\n        <div className=\"flex flex-col h-full p-4\">\n          <div className=\"flex-1 overflow-y-auto mb-4 space-y-4\">\n            {messages.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-8\">\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Start a conversation with the AI assistant!</p>\n              </div>\n            ) : (\n              messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  <div\n                    className={`max-w-[80%] rounded-lg px-4 py-2 ${\n                      message.role === \"user\"\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"bg-muted\"\n                    }`}\n                  >\n                    <p className=\"text-sm\">{message.content}</p>\n                    <p className=\"text-xs opacity-70 mt-1\">\n                      {message.timestamp.toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n            {isLoading && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-muted rounded-lg px-4 py-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <p className=\"text-sm\">AI is typing...</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          <div className=\"flex space-x-2\">\n            <Input\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              disabled={isLoading}\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={sendMessage}\n              disabled={!inputValue.trim() || isLoading}\n              size=\"icon\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}"
    }
  ]
}
